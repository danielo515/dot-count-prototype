# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Build web app
        run: yarn && yarn build
      - name: Extract certificate
        env:
          AUTH: ${{ secrets.ANDROID_SIGN_KEY }}
        run: echo "$AUTH" | base64 --decode > ANDROID_SIGN_KEY && pwd && ls -l
      - name: Build android app
        uses: oxr463/setup-cordova@0.0.2
        with:
          exec: |
            cd itemcounter && \
            cordova platform add android && \
            cordova build android --no-telemetry --release -- --keystore=../ANDROID_SIGN_KEY --storePassword=$KEY_PASS --alias=$ALIAS --password=$KEY_PASS && \
            (cd ./platforms/android && ./gradlew app:bundleRelease)
      # cp "$(find . -name '*.aab')" ./
      - name: Upload apk artifacts
        uses: actions/upload-artifact@v2
        with:
          name: apks
          path: ./**/*.apk
      - name: Upload aab artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bundled
          path: ./**/*.aab
      # - name: Sign app
      #   uses: oxr463/setup-cordova@0.0.2
      #   with:
      #     exec: |
      #       jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 \
      #       -keystore ./ANDROID_SIGN_KEY \
      #       "./$(ls *.apk)" ANDROID_KEY \
      #       --storepass $KEY_PASS
      # - name: Sign app
      #   uses: r0adkll/sign-android-release@v1
      #   with:
      #     releaseDirectory: ./itemcounter
      #     signingKeyBase64: ${{ secrets.ANDROID_SIGN_KEY }}
      #     alias: ${{ secrets.ALIAS }}
      #     keyStorePassword: ${{ secrets. KEY_PASS }}
      # - name: Upload artifacts
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: dotcounter
      #     # Be careful, the name of the sign app task matters!
      #     path: ${{ steps.sign-app.outputs.signedReleaseFile }}
